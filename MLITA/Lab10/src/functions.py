# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# thousand: 1   [26, 28, 26, 26, 28, 26, 26, 28, 26, 26]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# thousand: 2   [28, 26, 26, 28, 26, 26, 28, 26, 26, 28]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# thousand: 3   [26, 26, 28, 26, 26, 28, 26, 26, 28, 26]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# thousand: 4   [26, 28, 26, 26, 28, 26, 26, 28, 26, 26]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# thousand: 5   [28, 26, 26, 28, 26, 26, 28, 26, 26, 28]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# thousand: 6   [26, 26, 28, 26, 26, 28, 26, 26, 28, 26]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# thousand: 7   [26, 28, 26, 26, 28, 26, 26, 28, 26, 26]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# thousand: 8   [28, 26, 26, 28, 26, 26, 28, 26, 26, 28]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# thousand: 9   [26, 26, 28, 26, 26, 28, 26, 26, 28, 26]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# [4, 2, 2, 4, 2, 2, 4, 2, 2, 4]
# [2, 2, 4, 2, 2, 4, 2, 2, 4, 2]
# [2, 4, 2, 2, 4, 2, 2, 4, 2, 2]
# thousand: 10   [26, 28, 26, 26, 28, 26, 26, 28, 26, 26]



def read_file(file):
    N = file.readline().split()
    return N[0]


def get_count(seq, x, y):
    res = 0
    for i in range(len(seq)):
        if i < y: 
            res += len(seq[i])
        else:
            for j in seq[i]:
                if x < j:
                    break
                else: 
                    res += 1
            break
    return res


def seq_2_min_max(seq_2):
    maximum = seq_2[0]
    minimum = seq_2[0]
    for i in seq_2:
        if i != maximum:
            if i > maximum:
                maximum = i
            else: 
                minimum = i
            break
    return minimum, maximum


def seq_2_left_shift(seq_2, shifts_count = 1):
    minimum, maximum = seq_2_min_max(seq_2)
    for _ in range(shifts_count):
        seq_2.pop(0)
        if seq_2[0] == maximum:
            seq_2.append(maximum)
        else:
            seq_2.append(minimum)


def seq_2_to_seq_1(seq_2):
    minimum, maximum = seq_2_min_max(seq_2)
    if seq_2[0] == minimum:
        if seq_2[1] == maximum:
            return [(1, 7), (1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9), (3, 9), (1, 7)]
        else:
            return [(3, 9), (1, 7), (1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9), (3, 9)]
    else:
        return [(1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9), (3, 9), (1, 7), (1, 3, 7, 9)]
